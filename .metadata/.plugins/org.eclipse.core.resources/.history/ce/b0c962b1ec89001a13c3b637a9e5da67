package com.capgemini.librarymanagementsystemjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import com.capgemini.librarymanagementsystemjdbc.dto.LibraryDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.dto.BookDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.dto.RequestDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.exception.LibraryManagementJdbcExceptions;

public class AdminJdbcImplementation implements AdminJdbcDao {

	@Override
	public LibraryDetailsJdbc adminLogin(String emailId, String password) {

		LibraryDetailsJdbc adminBean = new LibraryDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("adminLogin");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, emailId);
					pstmt.setString(2, password);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						adminBean.setEmailId(rs.getString("emailid"));
						adminBean.setPassword(rs.getString("password"));
						return adminBean;
					} else {
						System.out.println();
						return null;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}
	
	@Override
	public boolean enrollUser(LibraryDetailsJdbc user) {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("addUser");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, user.getId());
					pstmt.setString(2, user.getUserName());
					pstmt.setString(3, user.getFirstName());
					pstmt.setString(4, user.getLastName());
					pstmt.setString(5, user.getEmailId());
					pstmt.setString(6, user.getPassword());
					pstmt.setString(7, user.getRole());

					int isRegistered = pstmt.executeUpdate();
					if (isRegistered != 0) {
						return true;
					} else {
						throw new LibraryManagementJdbcExceptions("User not registered");
					}

				}
			} catch (LibraryManagementJdbcExceptions e) {
				System.err.println("user already registered!!");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean enrollBook(BookDetailsJdbc book) {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("addBook");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, book.getBookId());
					pstmt.setString(2, book.getBookName());
					pstmt.setString(3, book.getAuthorName());
					pstmt.setString(4, book.getPublisher());
					pstmt.setString(5, book.getCategory());
					pstmt.setBoolean(6, book.isAvaliable());

					int isBookAdded = pstmt.executeUpdate();
					if (isBookAdded != 0) {
						return true;
					} else {
						throw new LibraryManagementJdbcExceptions("Book is not added in to account");
					}

				}
			} catch (LibraryManagementJdbcExceptions e) {
				System.err.println("Book is already added in to account");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean updateBook(BookDetailsJdbc bookInfo) {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("updateBook");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, bookInfo.getBookId());
					pstmt.setString(2, bookInfo.getBookName());
					pstmt.setString(3, bookInfo.getAuthorName());
					pstmt.setString(4, bookInfo.getPublisher());
					pstmt.setString(5, bookInfo.getCategory());

					int res = pstmt.executeUpdate();
					if (res != 0) {
						return true;
					}
				} catch (LibraryManagementJdbcExceptions lmse) {
					System.err.println("book can't be updated");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public BookDetailsJdbc searchByBookId(int bookId) {
		BookDetailsJdbc bookBean = new BookDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBook");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, bookId);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookBean.setBookId(rs.getInt("bookId"));
						bookBean.setBookName(rs.getString("bookName"));
						bookBean.setAuthorName(rs.getString("authorName"));
						return bookBean;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public BookDetailsJdbc searchByBookName(String bookName) {

		BookDetailsJdbc bookDetails = new BookDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBookByBookName");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, bookName);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						return bookDetails;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public BookDetailsJdbc searchByAuthorName(String authorName) {

		BookDetailsJdbc bookDetails = new BookDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBookByAuthorName");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, authorName);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						return bookDetails;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<LibraryDetailsJdbc> listOfUsers() {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection conn = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("getAllUsers");
				try (Statement pstmt = conn.createStatement()) {

					ResultSet rs = pstmt.executeQuery(query);
					List<LibraryDetailsJdbc> beans = new LinkedList<LibraryDetailsJdbc>();
					while (rs.next()) {
						LibraryDetailsJdbc userDetails = new LibraryDetailsJdbc();

						userDetails.setId(rs.getInt("id"));
						userDetails.setUserName(rs.getString("username"));
						userDetails.setFirstName(rs.getString("firstname"));
						userDetails.setLastName(rs.getString("lastname"));
						userDetails.setEmailId(rs.getString("emailid"));
						userDetails.setPassword(rs.getString("password"));
						userDetails.setRole(rs.getString("role"));
						beans.add(userDetails);

					}
					return beans;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@Override
	public List<BookDetailsJdbc> listOfBooks() {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("getAllBookInfo");
				try (Statement pstmt = connection.createStatement()) {

					ResultSet rs = pstmt.executeQuery(query);
					List<BookDetailsJdbc> bookList = new ArrayList<BookDetailsJdbc>();
					while (rs.next()) {
						BookDetailsJdbc bookDetails = new BookDetailsJdbc();
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						bookDetails.setPublisher(rs.getString("publisher"));
						bookDetails.setCategory(rs.getString("category"));
						bookList.add(bookDetails);

					}
					return bookList;
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@Override
	public List<RequestDetailsJdbc> listOfRequests() {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("showRequest");
				try (Statement pstmt = connection.createStatement()) {

					ResultSet rs = pstmt.executeQuery(query);
					List<RequestDetailsJdbc> requestList = new LinkedList<RequestDetailsJdbc>();
					while (rs.next()) {
						RequestDetailsJdbc requestDetails = new RequestDetailsJdbc();
						
						requestDetails.setRequestId(rs.getInt("requestId"));
						requestDetails.setUserId(rs.getInt("userId"));
						requestDetails.setBookId(rs.getInt("bookId"));
						//requestDetails.setBookName(rs.getString("bookName"));
						requestDetails.setIssueDate(rs.getDate("issuedDate"));
						requestDetails.setExpectedReturnDate(rs.getDate("expectedReturnDate"));
						requestDetails.setReturnDate(rs.getDate("returnDate"));
						//requestDetails.setFine(rs.getDouble("fine"));

						requestList.add(requestDetails);
					}
					return requestList;
				}
			}
		} catch (Exception e) {
			System.out.println("no request found");
		}

		return null;
	}

	
	@Override
	public boolean bookIssue(int requestId) {
		PreparedStatement pstmt = null;
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				pstmt = connection.prepareStatement(properties.getProperty("getRequest"));
				pstmt.setInt(1, requestId);
				ResultSet resultSet = pstmt.executeQuery();
				if (resultSet.next()) {
					RequestDetailsJdbc details = new RequestDetailsJdbc();
					details.setUserId(resultSet.getInt("userid"));
				    details.setBookId(resultSet.getInt("bookid"));
					
				    int requestedUserId = details.getUserId();
					
					int requestBookId = resultSet.getInt("bookid");
					

					if (requestedUserId != 0) {

						pstmt = connection.prepareStatement(properties.getProperty("getUsersBooks"));
						pstmt.setInt(1, requestedUserId);
						resultSet = pstmt.executeQuery();
						if (resultSet.next()) {
							LibraryDetailsJdbc uerDetails = new LibraryDetailsJdbc();
							uerDetails.setNoOfBooksBorrowed(resultSet.getInt("noOfBooksBorrowed"));
							int noOfBooksBorrowed = uerDetails.getNoOfBooksBorrowed();
							System.out.println("no of books Before issue	" + noOfBooksBorrowed);
							if (noOfBooksBorrowed < 3) {
								String query3 = properties.getProperty("issueBookQuery");
								pstmt = connection.prepareStatement(query3);
								pstmt.setInt(1, requestId);
								int updateDate = pstmt.executeUpdate();
								if (updateDate != 0) {
									System.out.println("Dates updated succesfully");
									// Update book availability as false as we are issuing
									String query4 = properties.getProperty("setAvailability");
									pstmt = connection.prepareStatement(query4);
									pstmt.setInt(1, requestBookId);
									pstmt.executeUpdate();
									// Update User no of books borrowed
									noOfBooksBorrowed++;
									String query5 = properties.getProperty("setNoOfBooksBorrowed");
									pstmt = connection.prepareStatement(query5);
									pstmt.setInt(1, noOfBooksBorrowed);
									pstmt.setInt(2, requestedUserId);
									pstmt.executeUpdate();

								} // End of if update date!=0

								return true;

							} else {
								//return false;// End OF If No of books borrowed <3
								throw new LibraryManagementJdbcExceptions("max limit exceeded");
							}

						} else {
							//return false;// End Of getting User Data
							throw new LibraryManagementJdbcExceptions("invalid user");
						}

					} else

					{
						System.out.println("");
						return false;
					}

				} else {
					return false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	
	
	@SuppressWarnings("resource")
	@Override
	public boolean isBookReceived(int requestId) {
		PreparedStatement pstmt = null;
		String query = null;
		ResultSet resultSet = null;
		int noOfDaysDelayed = 0;
		int fine = 0;
		int userId = 0;
		int bookId = 0;
		int result = 0;
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {

				query = properties.getProperty("receiveBook");
				pstmt = connection.prepareStatement(query);
				pstmt.setInt(1, requestId);
				resultSet = pstmt.executeQuery();

				while (resultSet.next()) {
					// Date issuedDate = resultSet.getDate("issuedDate");
					Date returnedDate = resultSet.getDate("returnDate");
					Date expectedReturnedDate = resultSet.getDate("expectedreturnDate");
					userId = resultSet.getInt("id");
					bookId = resultSet.getInt("bookid");

					if (returnedDate != null) {
						query = properties.getProperty("getfine");
						pstmt = connection.prepareStatement(query);
						pstmt.setDate(1, returnedDate);
						pstmt.setDate(2, expectedReturnedDate);
						pstmt.setInt(3, requestId);

						resultSet = pstmt.executeQuery();

						while (resultSet.next()) {
							noOfDaysDelayed = resultSet.getInt(1);
						}

						System.out.println("No Of Days Delayed " + noOfDaysDelayed);

						if (noOfDaysDelayed > 0) {
							fine = noOfDaysDelayed * 2;
							query = properties.getProperty("userFine");
							pstmt = connection.prepareStatement(query);
							pstmt.setDouble(1, fine);
							pstmt.setInt(2, userId);

							result = pstmt.executeUpdate();
							if (result != 0) {
								System.out.println("fine updated" + fine);
							}

						}

						// Make available in library books
						query = properties.getProperty("setBookAvailability2");
						pstmt = connection.prepareStatement(query);
						pstmt.setInt(1, bookId);
						result = pstmt.executeUpdate();

						// set No Of Books Borrowed
						query = properties.getProperty("setNoOfBooksBorrowed2");
						pstmt = connection.prepareStatement(query);
						pstmt.setInt(1, userId);
						result = pstmt.executeUpdate();

						query = properties.getProperty("removeRequest");
						pstmt = connection.prepareStatement(query);
						pstmt.setInt(1, requestId);

						result = pstmt.executeUpdate();

						return true;

					}

				} // End Of While Loop
				throw new LibraryManagementJdbcExceptions("Book Not Yet Returned");

			}
		} catch (Exception e) {
			throw new LibraryManagementJdbcExceptions("unable to receive");
			
		}

	}
	

	@Override
	public boolean removeBook(int bookId) {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("removeBook");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, bookId);
					int res = pstmt.executeUpdate();
					if (res != 0) {
						return true;
					}
				} catch (LibraryManagementJdbcExceptions lmse) {
					System.err.println("book can't be removed");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

}
