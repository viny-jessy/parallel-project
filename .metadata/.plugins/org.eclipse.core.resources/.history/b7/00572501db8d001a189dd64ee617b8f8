package com.capgemini.librarymanagementsystemhibernateproject.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import com.capgemini.librarymanagementsystemhibernateproject.dto.LibraryDetailsHibernate;
import com.capgemini.librarymanagementsystemhibernateproject.dto.BookDetailsHibernate;
import com.capgemini.librarymanagementsystemhibernateproject.dto.RequestDetailsHibernate;


public class AdminHibernateDaoImplementation implements AdminHibernateDao{
	
	
	@Override
	public LibraryDetailsHibernate adminLogin(String emailId, String password) {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from LibraryInformation  m where m.emailId=:emailId and m.password=:password";
		TypedQuery<LibraryDetailsHibernate> query=manager.createQuery(jpql,LibraryDetailsHibernate.class);
		query.setParameter("emailId", emailId);
		query.setParameter("password", password);
		try {
			LibraryDetailsHibernate libraryInfo= query.getSingleResult();
			System.out.println("User Email Id  is : "+libraryInfo.getEmailId());
			System.out.println("User Password  is : "+libraryInfo.getPassword());
		}catch(Exception e) {
			e.printStackTrace();
			
		}
		finally {
		manager.close();		
		factory.close();
		}
		
		return null;
	}	
	
	public boolean enrollUser(LibraryDetailsHibernate userInfo) {
		
		LibraryDetailsHibernate user=new LibraryDetailsHibernate();
		
		EntityManagerFactory factory = null;
	    EntityManager manager = null;
		EntityTransaction transaction = null;
		
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(user);
			System.out.println("Registartion record saved in database");
			transaction.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		manager.close();		
		factory.close();
		
		return false;
	}

	
	public boolean enrollBook(BookDetailsHibernate info) {
		
      BookDetailsHibernate book=new BookDetailsHibernate();
	
		EntityManagerFactory factory = null;
	    EntityManager manager = null;
		EntityTransaction transaction = null;
		
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(book);
			System.out.println("Record saved");
			transaction.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		manager.close();		
		factory.close();
		
		return false;
	}
		
	public boolean removeBook(int bookId) {
		
		EntityManagerFactory factory=null;
		EntityManager manager=null;
		EntityTransaction transaction=null;
		try {
	    factory=Persistence.createEntityManagerFactory("TestPersistence");
		manager=factory.createEntityManager();
		transaction=manager.getTransaction();
		transaction.begin();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class, bookId);
		manager.remove(record);
		System.out.println("book sucessfully deleted from the record");
		transaction.commit();
		}catch(Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		return false;
	}

	public boolean updateBook(BookDetailsHibernate bookInfo) {
		EntityManagerFactory factory=null;
		EntityManager manager=null;
		EntityTransaction transaction=null;
		try {
	    factory=Persistence.createEntityManagerFactory("TestPersistence");
		manager=factory.createEntityManager();
		transaction=manager.getTransaction();
		transaction.begin();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class, bookInfo);
		record.setBookId(bookInfo.getBookId());
		record.setBookName(bookInfo.getBookName());
		record.setAuthorName(bookInfo.getAuthorName());
		System.out.println("book updated sucessfully");
		transaction.commit();
		}catch(Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		manager.close();
		factory.close();
		
		return false;
	}
	
	public BookDetailsHibernate searchBookByBookId(int bookId) {
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		
		
		return null;
	}

	@Override
	public BookDetailsHibernate searchByBookId(int bookId) {
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class,bookId);
	
		return record;
	}

	@Override
	public BookDetailsHibernate searchByBookName(String bookName) {
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class,bookName);
	
		return record;
	}

	@Override
	public BookDetailsHibernate searchByAuthorName(String authorName) {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class,authorName);
	
		return record;
	}
	
	
	public List<LibraryDetailsHibernate> listOfUsers() {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from LibraryInformation m";
		TypedQuery<LibraryDetailsHibernate> query=manager.createQuery(jpql, LibraryDetailsHibernate.class);
		List<LibraryDetailsHibernate> recordlist=query.getResultList();
		
		return recordlist;
	}

	public List<BookDetailsHibernate> listOfBooks() {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from BookInformation m";
		TypedQuery<BookDetailsHibernate> query=manager.createQuery(jpql, BookDetailsHibernate.class);
		List<BookDetailsHibernate> recordlist=query.getResultList();
		
		
		return recordlist;
	}

	
	@Override
	public List<RequestDetailsHibernate> listOfRequests() {
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from RequestInformation m";
		TypedQuery<RequestDetailsHibernate> query=manager.createQuery(jpql, RequestDetailsHibernate.class);
		List<RequestDetailsHibernate> recordlist=query.getResultList();
	
		
		return recordlist;
	}

	public boolean bookIssue(int requestId) {
		
		return false;
	}

	public boolean isBookReceived(int requestId) {
		
		return false;
	}

	
	

	
	

}
