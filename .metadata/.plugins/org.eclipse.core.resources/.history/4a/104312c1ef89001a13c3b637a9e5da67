package com.capgemini.librarymanagementsystemjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import com.capgemini.librarymanagementsystemjdbc.dto.LibraryDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.dto.BookDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.dto.RequestDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.exception.LibraryManagementJdbcExceptions;

public class UserJdbcDaoImplementation implements UserJdbcDao {

	@Override
	public LibraryDetailsJdbc login(String emailId, String password) {
		LibraryDetailsJdbc details = new LibraryDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("adminLogin");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, emailId);
					pstmt.setString(2, password);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						details.setEmailId(rs.getString("emailid"));
						details.setPassword(rs.getString("password"));
						return details;
					} else {
						System.out.println();
						return null;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	@Override
	public List<BookDetailsJdbc> listOfBooks() {
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();

			String dburl = properties.getProperty("dburl");

			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("getAllBookInfo");
				try (Statement pstmt = connection.createStatement()) {

					ResultSet rs = pstmt.executeQuery(query);
					List<BookDetailsJdbc> bookList = new ArrayList<BookDetailsJdbc>();
					while (rs.next()) {
						BookDetailsJdbc bookDetails = new BookDetailsJdbc();
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						bookDetails.setPublisher(rs.getString("publisher"));
						bookDetails.setCategory(rs.getString("category"));
						bookList.add(bookDetails);

					}
					return bookList;
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@Override
	public BookDetailsJdbc searchByBookId(int id) {
		BookDetailsJdbc bookDetails = new BookDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBook");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setInt(1, id);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						return bookDetails;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	@Override
	public BookDetailsJdbc searchByBookName(String bookName) {

		BookDetailsJdbc bookDetails = new BookDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBookByBookName");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, bookName);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						return bookDetails;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public BookDetailsJdbc searchByAuthorName(String authorName) {

		BookDetailsJdbc bookDetails = new BookDetailsJdbc();
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {
				String query = properties.getProperty("searchBookByAuthorName");
				try (PreparedStatement pstmt = connection.prepareStatement(query)) {
					pstmt.setString(1, authorName);
					ResultSet rs = pstmt.executeQuery();
					if (rs.next()) {
						bookDetails.setBookId(rs.getInt("bookId"));
						bookDetails.setBookName(rs.getString("bookName"));
						bookDetails.setAuthorName(rs.getString("authorName"));
						return bookDetails;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

//	@Override
//	public RequestDetailsJdbc bookRequest(LibraryDetailsJdbc userBean, BookDetailsJdbc bookBean) {
//		RequestDetailsJdbc requestDetails=new RequestDetailsJdbc();
//		try(FileInputStream fis=new FileInputStream("LibraryManagementSystemDataBase.properties")){
//			Properties properties=new Properties();
//			properties.load(fis);
//			Class.forName(properties.getProperty("path")).newInstance();
//			String dburl=properties.getProperty("dburl");
//			try(Connection connection=DriverManager.getConnection(dburl)){
//				String query=properties.getProperty("bookRequest");
//				try(PreparedStatement pstmt=connection.prepareStatement(query)){
////					RequestInfo requestInfo=new RequestInfo();
//					pstmt.setInt(1 ,userBean.getId());
//					pstmt.setInt(2 ,bookBean.getBookId());
//					
//					int result=pstmt.executeUpdate();
//					
//					if(result!=0) {
//						
//						return requestDetails;				
//						
//					}else {
//						return null;
//					}	
//				}
//			}
//			
//		}catch (Exception e) {
//			e.printStackTrace();
//		}
//
//		return null;
//	}
//	
//	public RequestDetailsJdbc bookRequest(int id, int bookId,String bookName,String userName) {
//		PreparedStatement statement = null;
//		PreparedStatement statement1 = null;
//
//		ResultSet resultSet = null;
//		boolean isavail = false;
//
//		try (FileInputStream file = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
//			Properties properties = new Properties();
//			properties.load(file);
//			Class.forName(properties.getProperty("path"));
//			try (Connection connection = DriverManager.getConnection(properties.getProperty("dburl"))) {
//
//				statement = connection.prepareStatement(properties.getProperty("checkAvailability"));
//				statement.setInt(1, bookId);
//				resultSet = statement.executeQuery();
//
//				
//				while (resultSet.next()) {
//					isavail = resultSet.getBoolean(1);
//					System.out.println(isavail);
//				}
//				if (isavail) {
//					statement1 = connection.prepareStatement(properties.getProperty("insertBookRequest"));
//					statement1.setInt(1, id);
//					statement1.setInt(2, bookId);
//					statement1.setString(3, bookName);
//					statement1.setString(4, userName);
//					
//
//					int count = statement1.executeUpdate();
//					if (count != 0) {
//						RequestDetailsJdbc requestInfo = new RequestDetailsJdbc();
//
//						requestInfo.setUserId(id);
//						requestInfo.setBookId(bookId);
//						requestInfo.setBookName(bookName);
//						requestInfo.setUserName(userName);
//
//						return requestInfo;
//
//					}
//				}
//
//			}
//
//		} catch (Exception e) {
//			e.printStackTrace();
//
//		}
//		throw new LibraryManagementJdbcExceptions("Request Cannot Be Placed");
//	}
//
//	

	public RequestDetailsJdbc bookRequest(int userId, int bookId) {
		PreparedStatement statement = null;
		PreparedStatement statement1 = null;
		// PreparedStatement statement2 = null;
		ResultSet resultSet = null;
		boolean isavail = false;
		// int noOfRequests = 0;
		try (FileInputStream file = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(file);
			Class.forName(properties.getProperty("path"));
			try (Connection connection = DriverManager.getConnection(properties.getProperty("dburl"))) {

//				statement2 = connection.prepareStatement(properties.getProperty("countRequests"));
//				statement2.setInt(1, userId);
//				resultSet = statement2.executeQuery();
//				

				statement = connection.prepareStatement(properties.getProperty("checkAvailability"));
				statement.setInt(1, bookId);
				resultSet = statement.executeQuery();
				
				while (resultSet.next()) {
					isAvailable = resultSet.getBoolean(1);
					System.out.println("is book available : "+isAvaiable);
				}
				if (isavail) {
					statement1 = connection.prepareStatement(properties.getProperty("insertBookRequest"));
					statement1.setInt(1, userId);
					statement1.setInt(2, bookId);

					int count = statement1.executeUpdate();
					if (count != 0) {
						RequestDetailsJdbc requestInfo = new RequestDetailsJdbc();

						requestInfo.setUserId(userId);
						requestInfo.setBookId(bookId);

						return requestInfo;

					} else {
						throw new LibraryManagementJdbcExceptions("Request Cannot Be Placed");
					}
				} else {
					throw new LibraryManagementJdbcExceptions("This Book Is Not Available For Borrowing");
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new LibraryManagementJdbcExceptions("Request Cannot Be Placed");
		}

	}

	@Override
	public boolean bookReturn(int userId, int bookId) {
		ResultSet rs = null;
		PreparedStatement pstmt1 = null;
		try (FileInputStream fis = new FileInputStream("LibraryManagementSystemDataBase.properties")) {
			Properties properties = new Properties();
			properties.load(fis);
			Class.forName(properties.getProperty("path")).newInstance();
			String dburl = properties.getProperty("dburl");
			try (Connection connection = DriverManager.getConnection(dburl)) {

				try (PreparedStatement pstmt = connection.prepareStatement(properties.getProperty("bookReturn"))) {
					pstmt.setInt(1, userId);
					pstmt.setInt(2, bookId);

					rs = pstmt.executeQuery();

					if (rs.next() != false) {
						int requestId = rs.getInt("requestId");
						System.out.println("Request Id....." + requestId);

						pstmt1 = connection.prepareStatement(properties.getProperty("updateReturnDate"));
						pstmt1.setInt(1, requestId);

						int count = pstmt1.executeUpdate();
						if (count != 0) {
							return true;
						} else {
							return false;
						}

					}

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		throw new LibraryManagementJdbcExceptions("Book cannot be returned");
	}

}
