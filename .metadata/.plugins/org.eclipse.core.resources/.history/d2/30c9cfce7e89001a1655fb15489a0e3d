package com.capgemini.librarymanagementsystemjdbc.controller;

import java.util.Calendar;
import java.util.Date;
import java.util.InputMismatchException;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import com.capgemini.librarymanagementsystemjdbc.dto.LibraryDetailsJdbc;
import com.capgemini.librarymanagementsystem.dto.RequestDetails;
import com.capgemini.librarymanagementsystemjdbc.dto.BookDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.dto.RequestDetailsJdbc;
import com.capgemini.librarymanagementsystemjdbc.exception.LibraryManagementJdbcExceptions;
import com.capgemini.librarymanagementsystemjdbc.factory.LibraryFactoryJdbc;
import com.capgemini.librarymanagementsystemjdbc.service.AdminServiceJdbc;
import com.capgemini.librarymanagementsystemjdbc.service.UserServiceJdbc;
import com.capgemini.librarymanagementsystemjdbc.validation.LibraryManagementValidationsJdbc;

public class LibraryController {
	public static Scanner scanner=new Scanner(System.in);
	public static void main(String[] args) {
		librayControllerJdbc();
	}

		public static int checkChoice() {
			boolean flag = false;
			int choice = 0;
			do {
				try {
					choice = scanner.nextInt();
					flag = true;
				} catch (InputMismatchException e) {
					flag = false;
					System.err.println("Choice Should Contain Only Digits");
					scanner.next();
				} catch (LibraryManagementJdbcExceptions e) {
					flag = false;
					System.err.println(e.getMessage());
				}
			} while (!flag);
			return choice;
		}
		@SuppressWarnings("unused")
		public static  void librayControllerJdbc(){
			
		LibraryDetailsJdbc libraryDetails=LibraryFactoryJdbc.getAdmin_User_InformationJdbc();
		
		AdminServiceJdbc adminService=LibraryFactoryJdbc.getAdminJdbcService();
		
		UserServiceJdbc userService=LibraryFactoryJdbc.getUserJdbcService();
		
		BookDetailsJdbc bookDetails=LibraryFactoryJdbc.getBookInformationJdbc();
		
		RequestDetailsJdbc requestDetails=LibraryFactoryJdbc.getRequestInformationJdbc();
		
		LibraryManagementValidationsJdbc Validations=LibraryFactoryJdbc.getLibraryManagementJdbcValidations();
		
		Calendar calendar = Calendar.getInstance();
		
		Date actualReturnDate = LibraryFactoryJdbc.getDate();

		@SuppressWarnings("resource")
		Scanner scanner=new Scanner(System.in);
		int select;
		int check;
		int userChoice;
		do {
			
			System.out.println("--------------------WELCOME TO DIGITAL LIBRARY--------------");
			System.out.println("\t\t1.To Login in to Admin Account");
			System.out.println("\t\t2.To Login in to User Account");
			System.out.println("--------------------------------------------------------------");
			System.out.println("\nEnter your choice");
			select = scanner.nextInt();
			switch(select) {
			case 1:
				System.out.println("Please enter emailid in this format (vinitha@gmail.com)");
				System.out.println("\nEnter Admin Email id");
				String emailId = scanner.next();
				boolean validateByEmailId=Validations.validateByEmail(emailId);
				while(!validateByEmailId) {
					try {
						throw new LibraryManagementJdbcExceptions("Please enter valid Email Id i.e (vinitha@gmail.com)");
					} catch (LibraryManagementJdbcExceptions lmse) {
						System.out.println(".............................................................");
						System.err.println("please enter a valid email address i.e (vinitha@gmail.com)!!");
						System.out.println(".............................................................");
						emailId = scanner.next();
						if (Validations.validateByEmail(emailId)) {
							break;
						}
					}
				}
				System.out.println("\nEnter Admin password in this format (Vinitha@123)");
				String password = scanner.next();
				boolean validateByPassword=Validations.passwordValidation(password);
				while(!validateByPassword) {
					try {
						throw new LibraryManagementJdbcExceptions("Please enter valid password");
					}catch (LibraryManagementJdbcExceptions lmse) {
						System.out.println(".................................................................................");
						System.err.println("Enter a combination atleast 8 (number,letters(upper & lower case),punctuation marks");
						System.out.println("...................................................................................");
						password = scanner.next();
						if (Validations.passwordValidation(password)) {
							break;
						}
					}
				}
				try {
					adminService.adminLogin(emailId, password);
					System.out.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
					System.out.println("Admin logged in to Account Successfully!.......");
					System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
					do {
						
						System.out.println("\n1. To Register user");
						System.out.println("2. To Add Book in to library");
						System.out.println("3. To update book");
						System.out.println("4. To Search book by bookid");
						System.out.println("5. To Search book by auhor name");
						System.out.println("6. To search book by book name");
						System.out.println("7. To Show list of users enrolled in library");
						System.out.println("8. To Show list of books present in library");
						System.out.println("9. To Show list of Requests placed by users");
						System.out.println("10. To Issue book to user");
						System.out.println("11. To Recieve Returned book by user");
						System.out.println("12. To Remove Book from library");
						System.out.println("0. To Exit");
						System.out.println("\nEnter your choice");
						
						check = scanner.nextInt();
						switch(check) {
						case 1:
							
							System.out.println("-->Please enter below details to register");
							System.out.println("-->Entering User Id should be a 3 digit number");
							System.out.println("Enter user id");
							String userId=scanner.next();
							boolean validateByUserId=Validations.ValidateByUserId(userId);
							while(!validateByUserId) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid user Id");
								}catch(LibraryManagementJdbcExceptions lmse){
									System.out.println(".......................................................");
									System.err.println("Please enter valid user id i.e (only 3 digit numbers)!!");
									System.out.println(".......................................................");
									userId=scanner.next();
									if (Validations.ValidateByUserId(userId)) {
										
										break;
									}
								}
							}
							System.out.println("Enter username");
							String userName=scanner.next();
							boolean validateByName=Validations.validateByName(userName);
							while(!validateByName) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid user name");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("...................................................");
									System.err.println("Please enter valid user name i.e (only alphabets)!!");
									System.out.println("....................................................");
									userName=scanner.next();
									if(Validations.validateByName(userName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter Firstname");
							String firstName=scanner.next();
							boolean validateFirstName=Validations.validateByName(firstName);
							while(!validateFirstName) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid first name");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("...................................................");
									System.err.println("Please enter valid first name i.e (only alphabets)!!");
									System.out.println("....................................................");
									firstName=scanner.next();
									if(Validations.validateByName(firstName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter Lastname");
							String lastName=scanner.next();
							boolean validateLastName=Validations.validateByName(lastName);
							while(!validateLastName) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid last name");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("...................................................");
									System.err.println("Please enter valid first name i.e (only alphabets)!!");
									System.out.println("....................................................");
									lastName=scanner.next();
									if(Validations.validateByName(lastName)) {
										
										break;
									}
								}
							}
							System.out.println("\nPlease enter emailid in this format (vinitha@gmail.com)");
							System.out.println("\nEnter User Email id");
							String email=scanner.next();
							boolean validateByEmailId1=Validations.validateByEmail(email);
							while(!validateByEmailId1) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid email id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("............................................................");
									System.err.println("please enter a valid email address i.e (vinitha@gmail.com)!!");
									System.out.println("............................................................");
									email=scanner.next();
									if(Validations.validateByEmail(email)) {
										
										break;
									}
								}
							}
							System.out.println("\nEnter User password in this format (Vinitha@123)");
							System.out.println("\nPassword should contain (8-15)characters, atleast one uppercase,lower case,special character");
							String userPassword=scanner.next();
							boolean validatePassword=Validations.passwordValidation(userPassword);
							while(!validatePassword) {
								try {
									throw new LibraryManagementJdbcExceptions("Please valid password");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println(
											"...................................................................................................");
									System.err.println(
											"Enter a combination of atleast 8 number,letters,punctuation marks with upper and lower case letters");
									System.out.println(
											"...................................................................................................");
									userPassword=scanner.next();
									if(Validations.passwordValidation(userPassword)) {
										
										break;
									}
								}
							}
							System.out.println("Enter role");
							String role=scanner.next();
							boolean validateRole=Validations.validateByName(role);
							while(!validateRole) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid role");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("...................................................");
									System.err.println("Please enter valid role i.e (only alphabets)!!");
									System.out.println("....................................................");
									role=scanner.next();
									if(Validations.validateByName(role)) {
										
										break;
									}
								}
							}
							LibraryDetailsJdbc user1=new LibraryDetailsJdbc();
							user1.setId(Integer.parseInt(userId));
							user1.setUserName(userName);
							user1.setFirstName(firstName);
							user1.setLastName(lastName);
							user1.setEmailId(email);
							user1.setPassword(userPassword);
							user1.setRole(role);
							
							try {
								adminService.enrollUser(user1);

								System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
								System.out.println("user Registered Successfully!!!");
								System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
							} catch (LibraryManagementJdbcExceptions l) {
								System.out.println("...............................");
								System.err.println("sorry User already registered!!");
								System.out.println("...............................");
							}
							break;
						
							
							
						case 2:
							
							System.out.println("\n-->Enter Below details to add book in to library");
							System.out.println("\n-->Please make sure that Book Id must contain 6 digit number");
							System.out.println("\n-->Enter Book id");
							String bookId=scanner.next();
							boolean validateBookId=Validations.validateByBookId(bookId);
							while(!validateBookId) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("Please enter valid book id i.e (only 6 digits)!!");
									System.out.println("................................................");
									bookId=scanner.next();
									if(Validations.validateByBookId(bookId)) {
										break;
									}
								}
							}
							System.out.println("Enter Book name");
							String bookName=scanner.next();
							boolean validateByBookName=Validations.validateByName(bookName);
							while(!validateByBookName) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid book name");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("...................................................");
									System.err.println("Please enter valid book name i.e (only alphabets)!!");
									System.out.println("...................................................");
									bookName=scanner.next();
									if(Validations.validateByName(bookName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter author name");
							String authorName=scanner.next();
							boolean validateByAuthorName=Validations.validateByName(authorName);
							while(!validateByAuthorName) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid author name");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println(".....................................................");
									System.err.println("Please enter valid author name i.e (only alphabets)!!");
									System.out.println(".....................................................");
									if(Validations.validateByName(authorName)) {
										
										break;
									}
								}
							}
							System.out.println("Enter publishers name");
							String bookPublisher=scanner.next();
							boolean validateByPublisherName=Validations.validateByName(bookPublisher);
							while(!validateByPublisherName) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid publisher nsame");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("........................................................");
									System.err.println("Please enter valid publisher name i.e (only alphabets)!!");
									System.out.println("........................................................");
									bookPublisher=scanner.next();
									if(Validations.validateByName(bookPublisher)) {
										
										break;
									}
								}
							}
							System.out.println("Enter category");
							String category=scanner.next();
							boolean validateByCategory=Validations.validateByName(category);
							while(!validateByCategory) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter valid book category");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("........................................................");
									System.err.println("Please enter valid publisher name i.e (only alphabets)!!");
									System.out.println("........................................................");
									category=scanner.next();
									if(Validations.validateByName(category)) {
										
										break;
									}
								}
							}
							
							scanner.nextLine();
							System.out.println("Is Avaliable");
							boolean isAvaliable = scanner.nextBoolean();
							
							BookDetailsJdbc bookBean1 = new BookDetailsJdbc();

							bookBean1.setBookId(Integer.parseInt(bookId));
							bookBean1.setAuthorName(authorName);
							bookBean1.setBookName(bookName);
							bookBean1.setPublisher(bookPublisher);
							bookBean1.setCategory(category);
							bookBean1.setAvaliable(isAvaliable);
							
						try {
							boolean bookAdded = adminService.enrollBook(bookBean1);
							System.out.println(bookAdded);

							if (bookAdded) {
								System.out.println("");
								System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
								System.out.println("Book is added in to account successfully!!");
								System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
							} 
						}catch(LibraryManagementJdbcExceptions e) {
							System.out.println("...................................");
							System.out.println("Book is Added in to account already");
							System.out.println("...................................");
						}

							break;
							
							
						case 3:
							
							System.out.println("\n-->Enter Below details to update book in to library");
							System.out.println("\n-->Please make sure that Book Id must contain 6 digit number");
							System.out.println("\n-->Enter updatebook id");
							String updateBookId = scanner.next();
							boolean validateBookId1 = Validations.validateByBookId(updateBookId);
							while (!validateBookId1) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter available book id");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("Please enter valid book id i.e (only 6 digits)!!");
									System.out.println("................................................");
									bookId = scanner.next();
									if (Validations.validateByBookId(bookId)) {
										break;
									}
								}
							}


							try {
								BookDetailsJdbc bookSearch = adminService.searchByBookId(Integer.parseInt(updateBookId));
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("\nHere is the book details      :");
								System.out.println("========================================================");
								System.out.println("Book Id                         : " + bookSearch.getBookId());
								System.out.println("Book name                       : " + bookSearch.getBookName());
								System.out.println("Author name                     : " + bookSearch.getAuthorName());
								System.out.println("Book Category                   : " + bookSearch.getCategory());
								System.out.println("========================================================");
							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("..........................................");
								System.err.println("sorry book is not available in the library");
								System.out.println("..........................................");

							}
							
							System.out.println("\nEnter Book Name");
							String bookTitle1 = scanner.next();
							boolean ValidateByBookName1 = Validations.validateByName(bookTitle1);
							while (!ValidateByBookName1) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter available book name");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println("...................................................");
									System.err.println("Please enter valid book name i.e (only alphabets)!!");
									System.out.println("...................................................");
									bookTitle1 = scanner.next();
									if (Validations.validateByName(bookTitle1)) {
										break;
									}
								}
							}
							System.out.println("\nEnter Book Author name");
							String authourName1 = scanner.next();
							boolean ValidateByAuthorName1 = Validations.validateByName(authourName1);
							while (!ValidateByAuthorName1) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter available book author name");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println(".........................................................");
									System.err.println("Please enter valid book author name i.e(only alphabets)!!");
									System.out.println(".........................................................");
									authourName1 = scanner.next();
									if (Validations.validateByName(authourName1)) {
										break;
									}
								}
							}
							
							System.out.println("\nEnter Book Category");
							String bookCategory1 = scanner.next();
							boolean ValidateByBookCategory1 = Validations.validateByName(bookCategory1);
							while (!ValidateByBookCategory1) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter available book category");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println(".......................................................");
									System.err.println("Please enter valid book category i.e (only alphabets)!!");
									System.out.println(".......................................................");
									bookCategory1 = scanner.next();
									if (Validations.validateByName(bookCategory1)) {
										break;
									}
								}
							}

							BookDetailsJdbc bookInfo11 = new BookDetailsJdbc();

							bookInfo11.setBookId(Integer.parseInt(updateBookId));
							bookInfo11.setAuthorName(authourName1);
							bookInfo11.setBookName(bookTitle1);
							bookInfo11.setCategory(bookCategory1);
							
							try {

								boolean bookRemoved = adminService.removeBook(Integer.parseInt(updateBookId));
								if (bookRemoved) {
									boolean bookAdded = adminService.enrollBook(bookInfo11);
									System.out.println("Is Book updated in to account  : " + updateBookId);

									if (bookAdded) {
										System.out.println("");
										System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
										System.out.println("Book is updated in to account successfully!!");
										System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
									}
								}
								
							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("...................................");
								System.out.println("Book is failed to update in to account");
								System.out.println("...................................");
							}

							break;
							
							// Update Book details
							
										
						case 4:
							
							System.out.println("\n-->Enter Below Details to search a book by Id");
							System.out.println("\n-->Please make sure that Book Id must contain 6 digit number");
							System.out.println("\n-->Enter book Id");
							String searchBookId = scanner.next();
							boolean validateByBookId=Validations.validateByBookId(searchBookId);
							while(!validateByBookId) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("Please enter valid book id i.e (only 6 digits)!!");
									System.out.println("................................................");
									searchBookId=scanner.next();
									if(Validations.validateByBookId(searchBookId)) {
										break;
									}
								}
							}
							
							try {
								BookDetailsJdbc bookInfo = adminService.searchByBookId(Integer.parseInt(searchBookId));
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("Search book Found");
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("\nHere is the book details      :");
								System.out.println("========================================================");
								System.out.println("Book Id                         : " + bookInfo.getBookId());
								System.out.println("Book name                       : " + bookInfo.getBookName());
								System.out.println("Author name                     : " + bookInfo.getAuthorName());
								System.out.println("Book Category                   : " + bookInfo.getCategory());
								System.out.println("========================================================");
							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("..........................................");
								System.err.println("sorry book is not available in the library");
								System.out.println("..........................................");

							}
							break;
							
							
						case 5:
					
							System.out.println("\n-->Enter Below Details to search a book by book author name");
							System.out.println("\n-->Enter book author Name");
							String searchAuthorName = scanner.next();
							boolean validateByBookName1=Validations.validateByName(searchAuthorName);
							while(!validateByBookName1) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book book author name");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("Please enter valid author name i.e (only alphabets)!!");
									System.out.println("................................................");
									searchAuthorName=scanner.next();
									if(Validations.validateByBookId(searchAuthorName)) {
										break;
									}
								}
							}
							
							try {
								BookDetailsJdbc bookInfo = adminService.searchByAuthorName(searchAuthorName);
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("Search book Found");
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("\nHere is the book details      :");
								System.out.println("========================================================");
								System.out.println("Book Id                         : " + bookInfo.getBookId());
								System.out.println("Book name                       : " + bookInfo.getBookName());
								System.out.println("Author name                     : " + bookInfo.getAuthorName());
								System.out.println("Book Category                   : " + bookInfo.getCategory());
								System.out.println("========================================================");
							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("..........................................");
								System.err.println("sorry book is not available in the library");
								System.out.println("..........................................");

							}
							break;
									
						case 6:
							
							System.out.println("\n-->Enter Below Details to search a book by book name");
							System.out.println("\n-->Enter book Name");
							String searchBookName = scanner.next();
							boolean validateByBookName3=Validations.validateByName(searchBookName);
							while(!validateByBookName3) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("Please enter valid book id i.e (only 6 digits)!!");
									System.out.println("................................................");
									searchBookName=scanner.next();
									if(Validations.validateByBookId(searchBookName)) {
										break;
									}
								}
							}
							
							try {
								BookDetailsJdbc bookInfo = adminService.searchByBookName(searchBookName);
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("Search book Found");
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("\nHere is the book details      :");
								System.out.println("========================================================");
								System.out.println("Book Id                         : " + bookInfo.getBookId());
								System.out.println("Book name                       : " + bookInfo.getBookName());
								System.out.println("Author name                     : " + bookInfo.getAuthorName());
								System.out.println("Book Category                   : " + bookInfo.getCategory());
								System.out.println("========================================================");
							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("..........................................");
								System.err.println("sorry book is not available in the library");
								System.out.println("..........................................");

							}
							break;
							
								
						case 7:
								
							try {

								System.out.println("List of users              : ");
								List<LibraryDetailsJdbc> allBooks = adminService.listOfUsers();
								Iterator<LibraryDetailsJdbc> iterator=allBooks.iterator();
								while(iterator.hasNext()) {
									
									LibraryDetailsJdbc user=(LibraryDetailsJdbc)iterator.next();
								
									System.out.println("===========================================================");
									System.out.println("User id                    : " + user.getId());
									System.out.println("User Name                  : " + user.getUserName());
									System.out.println("Firstname                  : " + user.getFirstName());
									System.out.println("Lastname                   : " + user.getLastName());
									System.out.println("Email Id                   : " + user.getEmailId());
									System.out.println("Role                       : " + user.getRole());
									System.out.println("User No Of Books Borrowed  : " + user.getNoOfBooksBorrowed());
									System.out.println("===========================================================");
								}
							} catch (LibraryManagementJdbcExceptions e) {
								System.out.println("..................");
								System.err.println("There are no users");
								System.out.println("..................");
							}
							break;
							
						case 8:
							
							try {
								System.out.println("List of Books in library are :");
						
								
								List<BookDetailsJdbc> allBooks = adminService.listOfBooks();
								Iterator<BookDetailsJdbc> iterator=allBooks.iterator();
								while(iterator.hasNext()) {
									
									BookDetailsJdbc book=(BookDetailsJdbc)iterator.next();

									System.out.println("=======================================================");
									System.out.println("Book id                      : " + book.;
									System.out.println("Book Name                    : " + book.getBookName());
									System.out.println("Book Authour                 : " + book.getAuthorName());
									System.out.println("Book publisher               : " +book.getPublisher());
									System.out.println("Book Category                : " + book.getCategory());
									System.out.println("========================================================");
								}
							} catch (LibraryManagementJdbcExceptions e) {
								System.out.println(".....................................");
								System.err.println("sorry no books are present in library");
								System.out.println(".....................................");
							}
							break;
							
						case 9:
							
							try {

								System.out.println("List of request for book    : ");
								
								List<RequestDetailsJdbc> requestInfos = adminService.listOfRequests();
								Iterator<RequestDetailsJdbc> iterator=requestInfos.iterator();
								while(iterator.hasNext()) {
									
									RequestDetailsJdbc info=(RequestDetailsJdbc)iterator.next();

									System.out.println("=================================================");
									System.out.println("Request Id      :"+info.getRequestId());
									System.out.println("User id         :"+info.getUserId());
									System.out.println("Book id         :"+ info.getBookId());
									System.out.println("Book Name       :"+info.getBookName());
									System.out.println("User name		:"+info.getUserName());
									System.out.println("=================================================");
								}
							} catch (LibraryManagementJdbcExceptions e) {
								System.out.println(".....................................");
								System.out.println("No requests are available right now!!");
								System.out.println(".....................................");
							}
							break;
							
						case 10:
							
							System.out.println("-->Please enter below details to issue book");
							System.out.println("-->Entering request Id should be a 3 digit number");
							System.out.println("Enter request id");
							String requestId = scanner.next();
							
							try {
								boolean issue = adminService.bookIssue(Integer.parseInt(requestId));
								if (issue) {
									System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^");
									System.out.println("Book Issued Successfully!!");
									System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^");
								} 
							} catch (LibraryManagementJdbcExceptions e) {
								System.out.println(
										"....................................................................");
								System.err.println(
										"sorry book can't be issued, as you have exceeded your max limit(3)!!");
								System.out.println(
										"....................................................................");
							}
							break;
							
						case 11:
					
							System.out.println("-->Please enter below details to recieve returned book");
							System.out.println("Enter request id");
							int requestId1 = scanner.nextInt();
							
							try {
								boolean result = adminService.isBookReceived(requestId1);
								if (result) {
									System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
									System.out.println(" successfully received book returned by the user");
									System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
								}
							} catch (LibraryManagementJdbcExceptions e) {
								System.out.println("............................");
								System.err.println("user haven't returned book!!");
								System.out.println("............................");
							}

							break;		
					
							
						case 12:
						
						System.out.println("Enter the bookId to be removed:");
						String bookId1=scanner.next();
						boolean validateBookId11=Validations.validateByBookId(bookId1);
						while(!validateBookId11) {
							try {
								throw new LibraryManagementJdbcExceptions("please enter valid book id");
							}catch(LibraryManagementJdbcExceptions lmse) {
								System.out.println("....................................................");
								System.err.println("Please enter valid book id i.e (only 6 digits number");
								System.out.println("....................................................");
								bookId1=scanner.next();
								if(Validations.validateByBookId(bookId1)) {
									break;
								}
							}
						}
						try {
						boolean isBokkRemoved=adminService.removeBook(Integer.parseInt(bookId1));
						if(isBokkRemoved) {
							System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
							System.out.println("Book Removed successfully from libraray!");
							System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
						}
						}catch(LibraryManagementJdbcExceptions e) {
							System.out.println(".....................................");
							System.err.println("Sorry book is not available to remove");
							System.out.println(".....................................");
						}
						break;
						
						}
					}while(check!=0);
					}
				catch(Exception e) {
					System.out.println("Invalid Credentials");
				}
				break;
			case 2:
		
				System.out.println("\nPlease enter emailid in this format (vinitha@gmail.com)");
				System.out.println("\nEnter user Email id");
				String userEmailId = scanner.next();
				boolean validateByEmail=Validations.validateByEmail(userEmailId);
				while(!validateByEmail) {
					try {
						throw new LibraryManagementJdbcExceptions("Please enter valid Email Id");
					} catch (LibraryManagementJdbcExceptions lmse) {
						System.out.println(".................................................................");
						System.err.println("Please valid Email Address i.e in this format (vinitha@gmail.com)");
						System.out.println(".................................................................");
						userEmailId = scanner.next();
						if (Validations.validateByEmail(userEmailId)) {
							break;
						}
					}
				}
				System.out.println("\nEnter user password in this format (Vinitha@123)");
				System.out.println("\nPassword should contain (8-15)characters, atleast one uppercase,lower case,special character");
				String userPassword = scanner.next();
				boolean validatePassword=Validations.passwordValidation(userPassword);
				while(!validatePassword) {
					try {
						throw new LibraryManagementJdbcExceptions("Please enter registered password i.e in this format((Vinitha@123))");
					}catch (LibraryManagementJdbcExceptions lmse) {
						System.out.println("...............................................................");
						System.err.println("Please enter valid password i.e in this format((Vinitha@123))!!");
						System.out.println("...............................................................");
						userPassword = scanner.next();
						if (Validations.passwordValidation(userPassword)) {
							break;
						}
					}
				}

				try {
					LibraryDetailsJdbc userInfo = userService.login(userEmailId, userPassword);
					if(userInfo!=null) {
						System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
						System.out.println("User logged in to account successfully!!");
						System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
					do {
						System.out.println("\n--------Press below numbers to perform user operations-------");
						System.out.println("\n1. To show list of Books in library");
						System.out.println("2. To Search Book by Book Id");
						System.out.println("3. To Search Book by Book Name");
						System.out.println("4. To Search Book by Book Author Name");
						System.out.println("5. To Place Book Request");
						System.out.println("6. To Return Book in library");
						System.out.println("0. To Exit");
						System.out.println("\nEnter your choice");
						userChoice = scanner.nextInt();
						switch (userChoice) {
						
						case 1:
						
							try {
								System.out.println("List of Books in library are :");
								
								List<BookDetailsJdbc> allBooks = userService.listOfBooks();
								Iterator<BookDetailsJdbc> iterator=allBooks.iterator();
								while(iterator.hasNext()) {
									
									BookDetailsJdbc book=(BookDetailsJdbc)iterator.next();

									System.out.println("=======================================================");
									System.out.println("Book id                      : " + book.getBookId());
									System.out.println("Book Name                    : " + book.getBookName());
									System.out.println("Book Authour                 : " + book.getAuthorName());
									System.out.println("Book publisher               : " +book.getPublisher());
									System.out.println("Book Category                : " + book.getCategory());
									System.out.println("========================================================");
								}
							} catch (LibraryManagementJdbcExceptions e) {
								System.out.println(".....................................");
								System.err.println("sorry no books are present in library");
								System.out.println(".....................................");
							}
							break;
							
						
						case 2:
							System.out.println("Search a Book");
							System.out.println("Enter book Id");
							System.out.println("please make sure you eneter 6 digit book id");
							String searchBookId = scanner.next();
							boolean validateBySearchBookId=Validations.validateByBookId(searchBookId);
							while(!validateBySearchBookId) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("Please enter only valid book Id");
									searchBookId=scanner.next();
									if(Validations.validateByBookId(searchBookId)) {
										break;
									}
								}
							}
							try {
							BookDetailsJdbc bookInfo=userService.searchByBookId(Integer.parseInt(searchBookId));
							if(bookInfo!=null) {
							System.out.println("Book is found");
							System.out.println("Book Id---------->"+bookInfo.getBookId());
							System.out.println("Book name is---------->"+bookInfo.getBookName());
							System.out.println("Author name is---------->"+bookInfo.getAuthorName());
							}
							}catch(LibraryManagementJdbcExceptions e) {
								System.out.println("No such book is found in library");
							}
							
							break;
							
						case 3:
							
							System.out.println("\n-->Enter Below Details to search a book by book name");
							System.out.println("\n-->Enter book Name");
							String searchBookName = scanner.next();
							boolean validateByBookName3=Validations.validateByName(searchBookName);
							while(!validateByBookName3) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("Please enter valid book id i.e (only 6 digits)!!");
									System.out.println("................................................");
									searchBookName=scanner.next();
									if(Validations.validateByBookId(searchBookName)) {
										break;
									}
								}
							}
							
							try {
								BookDetailsJdbc bookInfo = userService.searchByBookName(searchBookName);
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("Search book Found");
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("\nHere is the book details      :");
								System.out.println("========================================================");
								System.out.println("Book Id                         : " + bookInfo.getBookId());
								System.out.println("Book name                       : " + bookInfo.getBookName());
								System.out.println("Author name                     : " + bookInfo.getAuthorName());
								System.out.println("Book Category                   : " + bookInfo.getCategory());
								System.out.println("========================================================");
							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("..........................................");
								System.err.println("sorry book is not available in the library");
								System.out.println("..........................................");

							}
							break;
							
						case 4:
							
							System.out.println("\n-->Enter Below Details to search abook by book author name");
							System.out.println("\n-->Enter book author name");
							String bookAuthorName = scanner.next();
							
							boolean validateByBookauthorname = Validations.validateByName(bookAuthorName);
							while (!validateByBookauthorname) {
								try {
									throw new LibraryManagementJdbcExceptions("Please enter available book author name");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println("..........................................................");
									System.err.println("Please enter valid book author name i.e (only alphabets)!!");
									System.out.println("..........................................................");
									bookAuthorName = scanner.next();
									if (Validations.validateByName(bookAuthorName)) {
										break;
									}
								}
							}
							try {
								BookDetailsJdbc bookSearchByAuthorName = userService.searchByAuthorName(bookAuthorName);
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("Search book Found");
								System.out.println("^^^^^^^^^^^^^^^^^");
								System.out.println("Here is the book details     : ");
								System.out.println("===========================================================");
								System.out.println("Book Id         : " + bookSearchByAuthorName.getBookId());
								System.out.println("Book name       : " + bookSearchByAuthorName.getBookName());
								System.out.println("Author name		: " + bookSearchByAuthorName.getAuthorName());
								System.out.println("===========================================================");

							} catch (LibraryManagementJdbcExceptions lmse) {
								System.out.println("..........................................");
								System.err.println("sorry book is not available in the library");
								System.out.println("..........................................");

							}
							break;
			
						case 5:
							
							LibraryDetailsJdbc userBean=new LibraryDetailsJdbc();
							System.out.println("make sure you enter 3 digit user id");
							System.out.println("Enter User id");
							BookDetailsJdbc booksBean=new  BookDetailsJdbc();
							String userId = scanner.next();
							boolean validatedByUserId=Validations.ValidateByUserId(userId);
							while(!validatedByUserId) {
								
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid user id");
								}catch(LibraryManagementJdbcExceptions lmse) {
									System.out.println("................................................");
									System.err.println("please enter valid user id i.e (only 3 digits)!!");
									System.out.println("................................................");
									userId=scanner.next();
									if(Validations.ValidateByUserId(userId)) {
										break;
									}
								}
							}	
							userBean.setId(Integer.parseInt(userId));
							System.out.println("\n-->Please make sure that book Id must contain 6 digit number");
						    System.out.println("\n-->Enter book Id of 6 digits");
						    String bookId=scanner.next();
						    boolean validatedByBookId=Validations.validateByBookId(bookId);
						while(!validatedByBookId) {
							try {
								throw new LibraryManagementJdbcExceptions("please enter valid book id");
							}catch(LibraryManagementJdbcExceptions lmse) {
								System.out.println(".......................................................");
								System.err.println("Please enter valid book id i.e (only 6 digits number)!!");
								System.out.println(".......................................................");
								bookId=scanner.next();
								if(Validations.validateByBookId(bookId)) {
									break;
								}
							}
						}
						booksBean.setBookId(Integer.parseInt(bookId));
						try {
							RequestDetailsJdbc details = userService.bookRequest(Integer.parseInt(userId), Integer.parseInt(bookId));
							
							System.out.println("^^^^^^^^^^^^^^^^^^^^^^^");
							System.out.println("Request placed to admin");
							System.out.println("^^^^^^^^^^^^^^^^^^^^^^^");
							System.out.println("Here are the book request details : ");
							System.out.println("==================================================");
							System.out.println("User Id                   : " + details.getUserDetails().getId());
							System.out.println("Book Id                   : " + details.getBookDetails().getBookId());
							System.out.println("User name                 : " + details.getUserDetails().getUserName());
							System.out.println("Book name                 : " + details.getBookDetails().getBookName());
							
							System.out.println("==================================================");
							
						}catch(LibraryManagementJdbcExceptions e) {
							
							System.out.println("............................................");
							System.err.println("sorry you are not allowed to place a request");
							System.out.println("............................................");
							
						}
						break;
	
						case 6:
							
							LibraryDetailsJdbc info = new LibraryDetailsJdbc();

							System.out.println("Returning a book:");
							System.out.println("------------------");
							System.out.println("Enter User Id");
							String id = scanner.next();
							boolean validateId = Validations.ValidateByUserId(id);
							while (!validateId) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println("Please enter only valid book Id");
									id = scanner.next();
									if (Validations.ValidateByUserId(id)) {
										break;
									}
								}
							}
							System.out.println("Enter Book Id");
							String bookId4 = scanner.next();
							boolean validatedBookId = Validations.validateByBookId(bookId4);
							while (!validatedBookId) {
								try {
									throw new LibraryManagementJdbcExceptions("please enter valid book id");
								} catch (LibraryManagementJdbcExceptions lmse) {
									System.out.println("Please enter only valid book Id");
									bookId4 = scanner.next();
									if (Validations.validateByBookId(bookId4)) {
										break;
									}
								}
							}

							try {
								boolean isReturn = userService.bookReturn(Integer.parseInt(id),
										Integer.parseInt(bookId4));
								if (isReturn) {
									System.out.println("Returning request placed to Admin");
								}
							} catch (LibraryManagementJdbcExceptions e) {
								System.err.println(e.getMessage());
							}

							break;
														
						}
						
			}while(userChoice!=0);
					}
				}catch(Exception e) {
					
				}
			}
		}while(true);
}

}
