package com.capgemini.librarymanagementsystemhibernateproject.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import com.capgemini.librarymanagementsystemhibernateproject.dto.LibraryDetailsHibernate;
import com.capgemini.librarymanagementsystemhibernateproject.dto.BookDetailsHibernate;
import com.capgemini.librarymanagementsystemhibernateproject.dto.RequestDetailsHibernate;


public class AdminHibernateDaoImplementation implements AdminHibernateDao{

	public boolean enrollUser(LibraryDetailsHibernate userInfo) {
		
		LibraryDetailsHibernate user=new LibraryDetailsHibernate();
		
		user.setId(userInfo.getId());
		user.setUserName(userInfo.getUserName());
		user.setFirstName(userInfo.getFirstName());
		user.setLastName(userInfo.getLastName());
		user.setEmailId(userInfo.getEmailId());
		user.setPassword(userInfo.getPassword());
		user.setRole(userInfo.getRole());
		 
		EntityManagerFactory factory = null;
	    EntityManager manager = null;
		EntityTransaction transaction = null;
		
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(user);
			System.out.println("Record saved");
			transaction.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		manager.close();		
		factory.close();
		
		return false;
	}

	public LibraryDetailsHibernate signIn(String emailId , String password) {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from LibraryInformation m where m.emailId = emailId,m.password = password ";
		TypedQuery<LibraryDetailsHibernate> query=manager.createQuery(jpql,LibraryDetailsHibernate.class);
		LibraryDetailsHibernate libraryInfo=query.getSingleResult();
		System.out.println("Email Id  is : "+libraryInfo.getEmailId());
		System.out.println("Password  is : "+libraryInfo.getPassword());
	
		return null;
	}

	public boolean enrollBook(BookDetailsHibernate info) {
		
      BookDetailsHibernate book=new BookDetailsHibernate();
		
		book.setSlno(info.getSlno());
		book.setBookId(info.getBookId());
		book.setBookName(info.getBookName());
		book.setAuthorName(info.getAuthorName());
		book.setPublisher(info.getPublisher());
		book.setCategory(info.getCategory());
		//book.setAvaliable();
	
		EntityManagerFactory factory = null;
	    EntityManager manager = null;
		EntityTransaction transaction = null;
		
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(book);
			System.out.println("Record saved");
			transaction.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		manager.close();		
		factory.close();
		
		return false;
	}
		
	public boolean removeBook(int bookId) {
		
		EntityManagerFactory factory=null;
		EntityManager manager=null;
		EntityTransaction transaction=null;
		try {
	    factory=Persistence.createEntityManagerFactory("TestPersistence");
		manager=factory.createEntityManager();
		transaction=manager.getTransaction();
		transaction.begin();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class, bookId);
		manager.remove(record);
		System.out.println("Record updates");
		transaction.commit();
		}catch(Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		return false;
	}

	public boolean updateBook(BookDetailsHibernate bookInfo) {
		EntityManagerFactory factory=null;
		EntityManager manager=null;
		EntityTransaction transaction=null;
		try {
	    factory=Persistence.createEntityManagerFactory("TestPersistence");
		manager=factory.createEntityManager();
		transaction=manager.getTransaction();
		transaction.begin();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class, bookInfo);
		record.setBookId(bookInfo.getBookId());
		record.setBookName(bookInfo.getBookName());
		System.out.println("Record updates");
		transaction.commit();
		}catch(Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		manager.close();
		factory.close();
		
		return false;
	}
	
	public BookDetailsHibernate searchBookByBookId(int bookId) {
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		BookDetailsHibernate record=manager.find(BookDetailsHibernate.class,bookId);
		record.getBookId();
		record.getBookName();
		record.getAuthorName();
		record.getPublisher();
		record.getCategory();
		System.out.println("Book Id is---------------->"+record.getBookId());
		System.out.println("Book Name is-------------->"+record.getBookName());
		System.out.println("Book Author Name is------->"+record.getAuthorName());
		System.out.println("Book Publisher is--------->"+record.getPublisher());
		System.out.println("Book Category is---------->"+record.getCategory());
		
		manager.close();
		factory.close();
		
		return null;
	}
		
	public List<LibraryDetailsHibernate> listOfUsers() {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from LibraryInformation m";
		TypedQuery<LibraryDetailsHibernate> query=manager.createQuery(jpql, LibraryDetailsHibernate.class);
		List<LibraryDetailsHibernate> recordlist=query.getResultList();
		for(LibraryDetailsHibernate libraryInfo:recordlist) {
			System.out.println("Id is------------>"+libraryInfo.getId());
			System.out.println("Name is----------->"+libraryInfo.getUserName());
			System.out.println("Rating is--------->"+libraryInfo.getLastName());
			System.out.println("Rating is--------->"+libraryInfo.getEmailId());
			System.out.println("Rating is--------->"+libraryInfo.getPassword());
			System.out.println("Rating is--------->"+libraryInfo.getRole());
			System.out.println("------------------------------------------");
		}
		factory.close();
		manager.close();
		
		return null;
	}

	public List<BookDetailsHibernate> listOfBooks() {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from BookInformation m";
		TypedQuery<BookDetailsHibernate> query=manager.createQuery(jpql, BookDetailsHibernate.class);
		List<BookDetailsHibernate> recordlist=query.getResultList();
		for(BookDetailsHibernate bookInfo:recordlist) {
			System.out.println("Book Id is------------>"+bookInfo.getBookId());
			System.out.println("Book Name is----------->"+bookInfo.getBookName());
			System.out.println("Book Author Name  is--------->"+bookInfo.getAuthorName());
			System.out.println("Book Publisher is--------->"+bookInfo.getPublisher());
			System.out.println("Book Category is--------->"+bookInfo.getCategory());
			System.out.println("------------------------------------------");
		}
		factory.close();
		manager.close();
		
		return null;
	}

		
	public List<RequestDetailsHibernate> showAllUserRequests() {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from RequestInformation m";
		TypedQuery<RequestDetailsHibernate> query=manager.createQuery(jpql, RequestDetailsHibernate.class);
		List<RequestDetailsHibernate> recordlist=query.getResultList();
		for(RequestDetailsHibernate requestInfo:recordlist) {
			
			System.out.println("Request Id  is----------------------->"+requestInfo.getRequestId());
			System.out.println("User  Id is-------------------------->"+requestInfo.getUserId());
			System.out.println("Book Id is--------------------------->"+requestInfo.getBookId());
			System.out.println("Book Name is------------------------->"+requestInfo.getBookName());
			System.out.println("Book Issued Date is------------------>"+requestInfo.getIssueDate());
			System.out.println("Book Expected Return Date is--------->"+requestInfo.getExpectedReturnDate());
			System.out.println("Book Return Date is------------------>"+requestInfo.getReturnDate());
			System.out.println("------------------------------------------");
		}
		factory.close();
		manager.close();
		
		return null;
	}

	public boolean bookIssue(int requestId) {
		
		return false;
	}

	public boolean isBookReceived(int requestId) {
		
		return false;
	}

}
