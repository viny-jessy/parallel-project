package com.capgemini.librarymanagementsystemhibernateproject.dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import com.capgemini.librarymanagementsystemhibernateproject.dto.BookInformation;
import com.capgemini.librarymanagementsystemhibernateproject.dto.LibraryInformation;
import com.capgemini.librarymanagementsystemhibernateproject.dto.RequestInformation;


public class UserHibernateDaoImplementation implements UserHibernateDao{

	@Override
	public LibraryInformation login(String email, String password) {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		String jpql="select m from LibraryInformation m where m.emailId = emailId,m.password = password ";
		TypedQuery<LibraryInformation> query=manager.createQuery(jpql,LibraryInformation.class);
		LibraryInformation libraryInfo=query.getSingleResult();
		System.out.println("Email Id  is : "+libraryInfo.getEmailId());
		System.out.println("Password  is : "+libraryInfo.getPassword());
	
		return null;
	}

	@Override
	public BookInformation searchById(int id) {
	
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("TestPersistence");
		EntityManager manager=factory.createEntityManager();
		BookInformation record=manager.find(BookInformation.class,id);
		record.getBookId();
		record.getBookName();
		record.getAuthorName();
		record.getPublisher();
		record.getCategory();
		System.out.println("Book Id is---------------->"+record.getBookId());
		System.out.println("Book Name is-------------->"+record.getBookName());
		System.out.println("Book Author Name is------->"+record.getAuthorName());
		System.out.println("Book Publisher is--------->"+record.getPublisher());
		System.out.println("Book Category is---------->"+record.getCategory());
		
		manager.close();
		factory.close();
		
		return null;
	}
		
		
	@Override
	public RequestInformation bookRequest(LibraryInformation userBean, BookInformation bookBean) {
		
		return null;
	}
	
//	RequestInformationJdbc requestInfo=new RequestInformationJdbc();
//	try(FileInputStream fis=new FileInputStream("LibraryManagementSystemDataBase.properties")){
//		Properties properties=new Properties();
//		properties.load(fis);
//		Class.forName(properties.getProperty("path")).newInstance();
//		String dburl=properties.getProperty("dburl");
//		try(Connection connection=DriverManager.getConnection(dburl)){
//			String query=properties.getProperty("bookRequest");
//			try(PreparedStatement pstmt=connection.prepareStatement(query)){
////				RequestInfo requestInfo=new RequestInfo();
//				pstmt.setInt(1 ,userBean.getId());
//				pstmt.setInt(2 ,bookBean.getBookId());
//				
//				int result=pstmt.executeUpdate();
//				
//				if(result!=0) {
//					
//					return requestInfo;				
//					
//				}else {
//					return null;
//				}	
//			}
//		}
//		
//	}catch (Exception e) {
//		e.printStackTrace();
//	}
//
//	return null;
//}

	
	

	@Override
	public boolean bookReturn(int userId, int bookId) {
	
		return false;
	}

}
